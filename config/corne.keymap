/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    flavor = "tap-preferred";
};

&lt { tapping-term-ms = <400>; };

&soft_off { hold-time-ms = <2000>; };

/ {
    behaviors {
        td_esc_semicolon: td_esc_semicolon {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ESC_SEMICOLON";
            #binding-cells = <0>;
            bindings = <&kp SEMICOLON>, <&kp ESC>;
        };
    };

    combos {
        compatible = "zmk,combos";
        timeout-ms = <200>;

        toggle_layer2 {
            bindings = <&tog 2>;
            key-positions = <30 31 32 33>;
        };

        /* sd_gui { */
        /* bindings = <&kp LEFT_GUI>; */
        /* key-positions = <15 14>; */
        /* }; */
        /* sf_ctrl { */
        /* bindings = <&kp LCTRL>; */
        /* key-positions = <16 14>; */
        /* }; */
        /* df_shift { */
        /* bindings = <&kp LEFT_SHIFT>; */
        /* key-positions = <16 15>; */
        /* }; */
        /* sdf_shift_gui { */
        /* bindings = <&kp LS(LEFT_GUI)>; */
        /* key-positions = <14 15 16>; */
        /* }; */
        /* kl_gui { */
        /* bindings = <&kp LEFT_GUI>; */
        /* key-positions = <20 21>; */
        /* }; */
        /* jl_ctrl { */
        /* bindings = <&kp LCTRL>; */
        /* key-positions = <19 21>; */
        /* }; */
        /* jk_shift { */
        /* bindings = <&kp LEFT_SHIFT>; */
        /* key-positions = <19 20>; */
        /* }; */
        /* jkl_shift_gui { */
        /* bindings = <&kp LS(LEFT_GUI)>; */
        /* key-positions = <19 20 21>; */
        /* }; */
        /* mkl_shift_ctrl { */
        /* bindings = <&kp LC(LEFT_SHIFT)>; */
        /* key-positions = <20 21 31>; */
        /* }; */
        /* sdv_shift_ctrl { */
        /* bindings = <&kp LC(LEFT_SHIFT)>; */
        /* key-positions = <15 14 28>; */
        /* }; */

        dfjk_caps_lock {
            bindings = <&kp CAPS>;
            key-positions = <16 15 19 20>;
        };

        we_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <3 2>;
        };

        sd_gui {
            bindings = <&kp LEFT_GUI>;
            key-positions = <14 15>;
        };

        df_sft {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <15 16>;
        };

        sf_ctl {
            bindings = <&kp LCTRL>;
            key-positions = <14 16>;
        };

        sdf_sftgui {
            bindings = <&kp LG(LEFT_SHIFT)>;
            key-positions = <14 15 16>;
        };

        sdv_sftctl {
            bindings = <&kp LC(LEFT_SHIFT)>;
            key-positions = <14 15 28>;
        };

        xc_tab {
            bindings = <&kp TAB>;
            key-positions = <26 27>;
        };

        io_bspc {
            bindings = <&kp BACKSPACE>;
            key-positions = <9 8>;
        };

        ioj_del {
            bindings = <&kp DELETE>;
            key-positions = <8 9 19>;
        };

        kl_gui {
            bindings = <&kp LEFT_GUI>;
            key-positions = <21 20>;
        };

        jk_sft {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <19 20>;
        };

        jl_ctl {
            bindings = <&kp LCTRL>;
            key-positions = <19 21>;
        };

        jkl_sftgui {
            bindings = <&kp LG(LEFT_SHIFT)>;
            key-positions = <19 20 21>;
        };

        mkl_sftctl {
            bindings = <&kp LC(LEFT_SHIFT)>;
            key-positions = <31 20 21>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    keymap {
        compatible = "zmk,keymap";

        // Base Layer (0)

        base {
            bindings = <
&none  &kp Q  &kp W  &kp E  &kp R  &kp T        &kp Y      &kp U  &kp I      &kp O       &kp P          &none
&none  &kp A  &kp S  &kp D  &kp F  &kp G        &kp H      &kp J  &kp K      &kp L       &kp SEMICOLON  &none
&none  &kp Z  &kp X  &kp C  &kp V  &kp B        &kp N      &kp M  &kp COMMA  &kp PERIOD  &kp SLASH      &none
                     &none  &mo 1  &kp ENTER    &kp SPACE  &mo 1  &none
            >;
        };

        // Symbols Layer (1)

        symbols {
            bindings = <
&none  &kp GRAVE        &kp N7        &kp N8        &kp N9          &kp N0        &kp C_VOLUME_UP    &trans        &kp MINUS     &kp EQUAL     &trans            &none
&none  &kp LBKT         &kp NUMBER_4  &kp N5        &kp NUMBER_6    &kp RBKT      &kp LEFT           &kp DOWN      &kp UP        &kp RIGHT     &kp SINGLE_QUOTE  &none
&none  &kp PRINTSCREEN  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3    &bt BT_CLR    &kp C_VOLUME_DOWN  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &kp BSLH          &none
                                      &none         &kp LEFT_SHIFT  &trans        &kp LEFT_SHIFT             &trans        &none
            >;
        };

        // Numbers/Nav Layer (2)
        // Extra Layer (3)

        extra {
            bindings = <
&none  &kp ESC         &kp Q  &kp W      &kp E      &kp R        &trans        &trans        &trans        &trans      &trans  &none
&none  &kp TAB         &kp A  &kp S      &kp D      &kp F        &trans        &trans        &trans        &trans      &trans  &none
&none  &kp LEFT_SHIFT  &kp Z  &kp X      &kp C      &kp V        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR  &trans  &none
                              &kp LCTRL  &kp ENTER  &kp SPACE    &trans        &trans        &none
            >;
        };
    };
};
